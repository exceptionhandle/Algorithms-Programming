
Bottom Up Iterative

class Solution {
public:
    int maxCoins(vector<int>& nums) {
        if(nums.empty()) return 0;
        nums.insert(nums.begin(), 1);
        nums.push_back(1);
        int sz = nums.size();
        for(int i = 0; i < sz; i++)
        {
            if(nums[i] == 0)
            {
                nums.erase(nums.begin()+i);
                sz--;
            }
        }
        sz = nums.size();
        vector<vector<int>> dp(sz, vector<int>(sz, 0));
        
        for(int gap = 2; gap < sz; gap++)
        {
            for(int left = 0; left < sz-gap; left++)
            {
                int right = left + gap;
                for(int mid = left+1; mid < right; mid++)
                {
                    dp[left][right] = max(dp[left][right], dp[left][mid] + nums[left]*nums[mid]*nums[right] + dp[mid][right]);
                }
            }
        }
        return dp[0][sz-1];
    }
};


Top Down recursive memoization
class Solution {
public:

    int find(vector<int>& nums, int l , int r, auto& dp)
    {
        if(l >= r-1) return 0;
        if(dp[l][r] != 0) return dp[l][r];
        for(int i = l+1; i < r; i++)
        {
            dp[l][r] = max(dp[l][r], find(nums, l, i, dp) + find(nums, i, r, dp) + nums[l]*nums[i]*nums[r]);
        }
        return dp[l][r];
    }
    int maxCoins(vector<int>& nums)
    {
        if(nums.empty()) return 0;
        nums.insert(nums.begin(), 1);
        nums.push_back(1);
        int sz = nums.size();
        for(int i = 0; i < sz; i++)
        {
            if(nums[i] == 0)
            {
                nums.erase(nums.begin()+i);
                sz--;
            }
        }
        sz = nums.size();
        vector<vector<int>> dp(sz, vector<int>(sz, 0));
        return find(nums, 0, sz-1, dp);
    }
};
