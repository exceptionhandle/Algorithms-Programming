Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

For example,
 Given nums = [1,3,-1,-3,5,3,6,7], and k = 3.
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7


Therefore, return the max sliding window as [3,3,5,5,6,7].

class Solution {
public:
    vector<int> finalAns;
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        if(nums.empty()) return {};
        deque<int> st;
        for(int i = 0; i < k and i < nums.size(); i++)
        {
            while(not st.empty() and st.back() < nums[i])
                st.pop_back();
            
            st.push_back(nums[i]);
        }
        finalAns.push_back(st.front());
        for(int i = k; i < nums.size(); i++)
        {
            
            if((not st.empty()) and nums[i-k] == st.front())
                st.pop_front();
            
            while(not st.empty() and st.back() < nums[i])
                st.pop_back();
            
            st.push_back(nums[i]);
            finalAns.push_back(st.front());
        }
        return finalAns;
    }
};
