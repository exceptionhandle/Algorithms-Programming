Given a string s and a dictionary of words dict, add spaces in s to construct a sentence where each word is a valid dictionary word.

Return all such possible sentences.

For example, given
s = "catsanddog",
dict = ["cat", "cats", "and", "sand", "dog"].

A solution is ["cats and dog", "cat sand dog"].


class Solution {
public:
    
    vector<string> wordBreak(string s, unordered_set<string>& wordDict) {
        if(s.empty()) return {};
        unordered_map<int , vector<string>> mem{{s.size(), {""}}};
        auto sentences = [&](int i)
        {
            if(mem.count(i) > 0) return mem[i];
            for(int j = i + 1; j <= s.size(); j++)
            {
                string str = s.substr(i, j-i);
                
                if(wordDict.count(str) < 1) continue;
                for(string tail : sentences(j))
                {
                    mem[i].push_back(str + (tail.empty()? "": " " + tail));
                }
                
            }
            return mem[i];
        };
        return sentences(0);
    }
};
