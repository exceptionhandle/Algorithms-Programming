#define LN ListNode
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        if(!(head) || !(head->next)) return head;
        LN *head1 = NULL, *pt1 = NULL, *head2 = NULL, *pt2 = NULL;
        auto iterate = [](LN **pt, LN **h1, LN **h){(*pt)? ((*pt)->next = (*h), (*pt) = (*pt)->next):( (*h1) = (*h), (*pt) = (*h)); (*h) = (*h)->next;};
        
        while(head)  (head->val < x)? iterate(&pt1, &head1, &head) : iterate(&pt2, &head2, &head);
        
        if(pt1) pt1->next = head2;
        if(pt2) pt2->next = NULL;
        return head1?head1: head2;
    }
};

// ***************************************************************************** //
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
#define ln ListNode
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        if(not head)return head;
        ln dummy(-1);
        dummy.next = head;
        ln *ptr = &dummy;
        while(head and head->val < x)
        {
            ptr = head, head = head->next;
        }
        ln *prev = head;
        while(ptr->next and head)
        {
            if(head->val < x)
            {
                prev->next = head->next;
                head->next = ptr->next;
                ptr->next = head;
                ptr = ptr->next;
                head = prev->next;
            }
            else
            {
                prev = head;
                head = head->next;
            }
        }
        return dummy.next;
    }
};
