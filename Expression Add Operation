Given a string that contains only digits 0-9 and a target value, return all possibilities to add binary operators (not unary) +, -, or * between the digits so they evaluate to the target value.

Examples: 
"123", 6 -> ["1+2+3", "1*2*3"] 
"232", 8 -> ["2*3+2", "2+3*2"]
"105", 5 -> ["1*0+5","10-5"]
"00", 0 -> ["0+0", "0-0", "0*0"]
"3456237490", 9191 -> []
Credits:
Special thanks to @davidtan1890 for adding this problem and creating all test cases.

class Solution {
    vector<string> ans;
public:
    vector<string> addOperators(string num, int target) {
        if(num.empty()) return {};
        long last = 0;
        long final = 0;
        string str = "";
        while(not num.empty())
        {
            str += num.front();
            last = last*10 + num.front()-'0';
            final = final*10 + num.front()-'0';
            num.erase(num.begin());
            recurNAdd(num, final, last, str, target);
            if(last == 0) break;
        }
        return ans;
    }
    void recurNAdd(string num, long final, long last, string str, long target)
    {
        if(num.empty())
        {
            if(final == target)
            {
                ans.push_back(str);
            }
            return;
        }
        
        long n = 0;
        while(not num.empty())
        {
            n = n*10 + num.front()-'0';
            num.erase(num.begin());
            recurNAdd(num, final + n, n, str + "+" + to_string(n), target);
            recurNAdd(num, final - n, -n, str + "-" + to_string(n), target);
            recurNAdd(num, final - last + (last * n), (last * n), str + "*" + to_string(n), target);
            if(n == 0) return;
        }
    }
};
