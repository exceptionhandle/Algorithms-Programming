// Horizontal Traversal
class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        int len = strs.size();
        if(len == 0) return "";
        if(len == 1) return strs[0];
        int subLen = 0;
        for(int i = 1; i < len; i++)
        {
            int z = 0;
            int slen1 = strs[i-1].size();
            int slen2 = strs[i].size();
            while ((i == 1 || z < subLen) && z < slen1 && z < slen2 && strs[i][z] == strs[i-1][z]) z++;
            if(z <= 0) return "";
            subLen = z;
        }
        return strs[len-1].substr(0,subLen);
    }
};

// Vertical Traversal
class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        int len = strs.size();
        if(len == 0) return "";
        if(len == 1) return strs[0];
        int i;
        for(i = 0; i < strs[0].size(); i++)
        {
            for(int x = 1; x < len; x++)
                if(strs[x].size() <= i || strs[x][i]!=strs[x-1][i]) return strs[x].substr(0,i);
        }
        return strs[len-1].substr(0,i);
    }
};
