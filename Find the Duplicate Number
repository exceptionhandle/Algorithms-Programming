O(n) solution (16 ms)
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int len = nums.size();
        if(len == 0) return -1;
        int slow = 0, fast = 0;
        slow = nums[0];
        fast = nums[nums[fast]];
        while(slow != fast)
        {
            slow = nums[slow];
            fast = nums[nums[fast]];
        }
        fast = 0;
        while(slow != fast)
        {
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;
    }
};

using count of smaller than mid binary search(24 ms)
class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int len = nums.size();
        if(len == 0) return -1;
        int lo = 0, hi = len - 1;
        while(lo <= hi)
        {
            int mid = (lo+hi)/2;
            int cnt = 0;
            for(auto num : nums)
            {
                if(num <= mid )
                    cnt++;
            }
            if(cnt <= mid)
                lo = mid+1;
            else
                hi = mid-1;
        }
        return lo;
    }
};

Using Sorting (28 ms)

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int len = nums.size();
        sort(nums.begin(), nums.end());
        if(len == 0) return -1;
        int lo = 0, hi = len - 1;
        while(lo <= hi)
        {
            int mid = (lo+hi)/2;
            if(nums[mid] >= mid+1 )
                lo = mid+1;
            else if(nums[mid] < mid+1)
                hi = mid-1;
        }
        return lo;
    }
};
