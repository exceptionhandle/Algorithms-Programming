Given a string s, partition s such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

For example, given s = "aab",
Return 1 since the palindrome partitioning ["aa","b"] could be produced using 1 cut.

class Solution {
public:
    int minCut(string s) {
        if(s.empty()) return 0;
        int len = s.size();
        vector<int> minCut(s.size());
        vector<vector<bool>> isPal(s.size(), vector<bool>(s.size(), 0));
        for(int i = 0; i < len; i++)
        {
            int least = i;
            for(int j = 0 ; j <= i; j++)
            {
                if((s[i] == s[j]) and ((j+1 >= i) or isPal[j+1][i-1]))
                {
                    isPal[j][i] = true;
                    least = (j==0)?0: min(least, (minCut[j-1]+1));
                }
            }
            minCut[i] = least;
        }
        return minCut[s.size()-1];
    }
};
