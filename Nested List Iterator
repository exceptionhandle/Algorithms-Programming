// 1st Solution by precomputing list from the nested list

class NestedIterator {
public:
    vector<int> list;
    int nextInd;
    NestedIterator *nestedIter;

    NestedIterator(vector<NestedInteger> &nestedList) {
        forwardIter(nestedList);
        nextInd = -1;
    }

    int next() {
        nextInd++;
        return list[nextInd];
    }

    bool hasNext() {
        return nextInd+1 < list.size();
    }
    void forwardIter(auto &nestedList)
    {
        for(auto &item : nestedList)
        {
            if((item).isInteger())
            {
                list.push_back((item).getInteger());
            }
            else
            {
                forwardIter((item).getList());
            }
        }
    }
};

// 2nd using smart pointers

class NestedIterator {
public:
    vector<NestedInteger> nestedList;
    int nextInd;
    unique_ptr<NestedIterator> nestedIter;

    NestedIterator(vector<NestedInteger> &nestedList) {
        this->nestedList = nestedList;
        nextInd = -1;
        forwardIter();
    }

    int next() {
        auto item = nestedList[nextInd];
        auto val = item.isInteger()?item.getInteger():(nestedIter->next());
        forwardIter();
        return val;
    }

    bool hasNext() {
        return nextInd < nestedList.size();
    }
    void forwardIter()
    {
        if(nestedIter && nestedIter->hasNext()) return;
        
        do{
        nextInd++;
        nestedIter = (nextInd >= nestedList.size() || nestedList[nextInd].isInteger())? nullptr: make_unique<NestedIterator>(nestedList[nextInd].getList());
        }while(nestedIter && !(nestedIter->hasNext()));
    }
    template<typename T, typename... Ts>
    unique_ptr<T> make_unique(Ts&&... args)
    {
        return unique_ptr<T>(new T(forward<Ts>(args)...));
    }
};
